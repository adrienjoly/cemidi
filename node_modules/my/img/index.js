var http = require('http');
var fs = require('fs');
var url = require('url');

var USE_GRAPHICS_MAGICK = true;
console.log("my.img:USE_GRAPHICS_MAGICK = ", USE_GRAPHICS_MAGICK);

if (USE_GRAPHICS_MAGICK) {
	var gm = require('./node-magick');

	exports.get = function(imgUrl, imgOutput, endListener, errorListener) {
	  imgUrl = url.parse(imgUrl);
	  http.get({host: imgUrl.host, path: imgUrl.pathname, port: 80}, function(res) {
		var data = '';
		res.setEncoding('binary');
		res.on('data', function(chunk) { data += chunk; });
		res.on('end', function() {
		  console.log('done');
		  fs.writeFile(imgOutput, data, 'binary', function(err) {
			if (err) {
			  if (errorListener)
				errorListener(err);
			  return;
			}
			if (endListener)
			  endListener();
		  });
		});
	  });
	}

	exports.makeThumb = function(imgPath, thumbOutput, width, height, endListener) {
	  gm.createCommand(imgPath)
		.resize(width || "", height || "")
		.write(thumbOutput, function() {
		  if (endListener)
			endListener();
		});
	}
}
else {
	var exec = require('child_process').exec;

	var emptyFunc = function(){};

	exports.get = function(imgUrl, imgOutput, endListener, errorListener) {
	  imgUrl = url.parse(imgUrl);
	  http.get({host: imgUrl.host, path: imgUrl.pathname, port: 80}, function(res) {
		res.pipe(fs.createWriteStream(imgOutput))
		   .on('end', endListener || emptyFunc)
		   .on('error', errorListener || emptyFunc);
	  });  
	}

	exports.makeThumb = function(imgPath, thumbOutput, width, height, endListener) {
	  var execCallback = function(error, stdout, stderr){
		console.log("exec convert => ", error, stdout, stderr);
		if (endListener) endListener(error, stdout, stderr);
	  };
	  if (width && height)
		exec('convert ' + imgPath + ' -resize ' + width + 'x' + height + ' ' + thumbOutput, execCallback);
	  else if (width)
		exec('convert ' + imgPath + ' -resize ' + width + ' ' + thumbOutput, execCallback);
	  else if (height)
		exec('convert ' + imgPath + ' -resize x' + height + ' ' + thumbOutput, execCallback);
	}
}
